/**
 * Receipt Tracker API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AggregationType } from '../model/aggregationType';
// @ts-ignore
import { AverageReceiptValueKPI } from '../model/averageReceiptValueKPI';
// @ts-ignore
import { HTTPValidationError } from '../model/hTTPValidationError';
// @ts-ignore
import { MarketAverageSpentList } from '../model/marketAverageSpentList';
// @ts-ignore
import { MarketTotalReceiptsList } from '../model/marketTotalReceiptsList';
// @ts-ignore
import { MarketTotalSpentList } from '../model/marketTotalSpentList';
// @ts-ignore
import { TimeSeriesData } from '../model/timeSeriesData';
// @ts-ignore
import { TopItemsKPI } from '../model/topItemsKPI';
// @ts-ignore
import { TotalReceiptsKPI } from '../model/totalReceiptsKPI';
// @ts-ignore
import { TotalSpentKPI } from '../model/totalSpentKPI';
// @ts-ignore
import { WordCloudItem } from '../model/wordCloudItem';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class StatisticService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Get Amounts Timeseries
     * Get time series data for amounts spent by date - calculated in database
     * @param dateFrom Szűrés kezdő dátum alapján
     * @param dateTo Szűrés vég dátum alapján
     * @param userId Szűrés felhasználó ID alapján (csak adminoknak)
     * @param aggregation Aggregálás szintje: day, month, year
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAmountsTimeseriesStatisticTimeseriesAmountsGet(dateFrom?: string, dateTo?: string, userId?: number, aggregation?: AggregationType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<TimeSeriesData>>;
    public getAmountsTimeseriesStatisticTimeseriesAmountsGet(dateFrom?: string, dateTo?: string, userId?: number, aggregation?: AggregationType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<TimeSeriesData>>>;
    public getAmountsTimeseriesStatisticTimeseriesAmountsGet(dateFrom?: string, dateTo?: string, userId?: number, aggregation?: AggregationType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<TimeSeriesData>>>;
    public getAmountsTimeseriesStatisticTimeseriesAmountsGet(dateFrom?: string, dateTo?: string, userId?: number, aggregation?: AggregationType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateFrom, 'date_from');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateTo, 'date_to');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>userId, 'user_id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>aggregation, 'aggregation');

        let localVarHeaders = this.defaultHeaders;

        // authentication (HTTPBearer) required
        localVarHeaders = this.configuration.addCredentialToHeaders('HTTPBearer', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/statistic/timeseries/amounts`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<TimeSeriesData>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Average Receipt Value Kpi
     * Get average receipt value KPI - calculated in database
     * @param dateFrom Szűrés kezdő dátum alapján
     * @param dateTo Szűrés vég dátum alapján
     * @param userId Szűrés felhasználó ID alapján (csak adminoknak)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAverageReceiptValueKpiStatisticKpiAverageReceiptValueGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AverageReceiptValueKPI>;
    public getAverageReceiptValueKpiStatisticKpiAverageReceiptValueGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AverageReceiptValueKPI>>;
    public getAverageReceiptValueKpiStatisticKpiAverageReceiptValueGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AverageReceiptValueKPI>>;
    public getAverageReceiptValueKpiStatisticKpiAverageReceiptValueGet(dateFrom?: string, dateTo?: string, userId?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateFrom, 'date_from');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateTo, 'date_to');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>userId, 'user_id');

        let localVarHeaders = this.defaultHeaders;

        // authentication (HTTPBearer) required
        localVarHeaders = this.configuration.addCredentialToHeaders('HTTPBearer', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/statistic/kpi/average-receipt-value`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<AverageReceiptValueKPI>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Market Average Spent
     * Átlagos költés marketenként - aggregáció az adatbázisban
     * @param dateFrom Szűrés kezdő dátum alapján
     * @param dateTo Szűrés vég dátum alapján
     * @param userId Szűrés felhasználó ID alapján (csak adminoknak)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMarketAverageSpentStatisticMarketAverageSpentGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<MarketAverageSpentList>;
    public getMarketAverageSpentStatisticMarketAverageSpentGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<MarketAverageSpentList>>;
    public getMarketAverageSpentStatisticMarketAverageSpentGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<MarketAverageSpentList>>;
    public getMarketAverageSpentStatisticMarketAverageSpentGet(dateFrom?: string, dateTo?: string, userId?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateFrom, 'date_from');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateTo, 'date_to');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>userId, 'user_id');

        let localVarHeaders = this.defaultHeaders;

        // authentication (HTTPBearer) required
        localVarHeaders = this.configuration.addCredentialToHeaders('HTTPBearer', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/statistic/market/average-spent`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<MarketAverageSpentList>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Market Total Receipts
     * Vásárlások száma marketenként - aggregáció az adatbázisban
     * @param dateFrom Szűrés kezdő dátum alapján
     * @param dateTo Szűrés vég dátum alapján
     * @param userId Szűrés felhasználó ID alapján (csak adminoknak)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMarketTotalReceiptsStatisticMarketTotalReceiptsGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<MarketTotalReceiptsList>;
    public getMarketTotalReceiptsStatisticMarketTotalReceiptsGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<MarketTotalReceiptsList>>;
    public getMarketTotalReceiptsStatisticMarketTotalReceiptsGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<MarketTotalReceiptsList>>;
    public getMarketTotalReceiptsStatisticMarketTotalReceiptsGet(dateFrom?: string, dateTo?: string, userId?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateFrom, 'date_from');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateTo, 'date_to');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>userId, 'user_id');

        let localVarHeaders = this.defaultHeaders;

        // authentication (HTTPBearer) required
        localVarHeaders = this.configuration.addCredentialToHeaders('HTTPBearer', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/statistic/market/total-receipts`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<MarketTotalReceiptsList>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Market Total Spent
     * Összköltés marketenként - minden aggregáció az adatbázisban történik
     * @param dateFrom Szűrés kezdő dátum alapján
     * @param dateTo Szűrés vég dátum alapján
     * @param userId Szűrés felhasználó ID alapján (csak adminoknak)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMarketTotalSpentStatisticMarketTotalSpentGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<MarketTotalSpentList>;
    public getMarketTotalSpentStatisticMarketTotalSpentGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<MarketTotalSpentList>>;
    public getMarketTotalSpentStatisticMarketTotalSpentGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<MarketTotalSpentList>>;
    public getMarketTotalSpentStatisticMarketTotalSpentGet(dateFrom?: string, dateTo?: string, userId?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateFrom, 'date_from');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateTo, 'date_to');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>userId, 'user_id');

        let localVarHeaders = this.defaultHeaders;

        // authentication (HTTPBearer) required
        localVarHeaders = this.configuration.addCredentialToHeaders('HTTPBearer', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/statistic/market/total-spent`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<MarketTotalSpentList>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Receipts Timeseries
     * Get time series data for receipts count by date - calculated in database
     * @param dateFrom Szűrés kezdő dátum alapján
     * @param dateTo Szűrés vég dátum alapján
     * @param userId Szűrés felhasználó ID alapján (csak adminoknak)
     * @param aggregation Aggregálás szintje: day, month, year
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReceiptsTimeseriesStatisticTimeseriesReceiptsGet(dateFrom?: string, dateTo?: string, userId?: number, aggregation?: AggregationType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<TimeSeriesData>>;
    public getReceiptsTimeseriesStatisticTimeseriesReceiptsGet(dateFrom?: string, dateTo?: string, userId?: number, aggregation?: AggregationType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<TimeSeriesData>>>;
    public getReceiptsTimeseriesStatisticTimeseriesReceiptsGet(dateFrom?: string, dateTo?: string, userId?: number, aggregation?: AggregationType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<TimeSeriesData>>>;
    public getReceiptsTimeseriesStatisticTimeseriesReceiptsGet(dateFrom?: string, dateTo?: string, userId?: number, aggregation?: AggregationType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateFrom, 'date_from');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateTo, 'date_to');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>userId, 'user_id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>aggregation, 'aggregation');

        let localVarHeaders = this.defaultHeaders;

        // authentication (HTTPBearer) required
        localVarHeaders = this.configuration.addCredentialToHeaders('HTTPBearer', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/statistic/timeseries/receipts`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<TimeSeriesData>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Top Items Kpi
     * Get top items KPI - calculated in database
     * @param dateFrom Szűrés kezdő dátum alapján
     * @param dateTo Szűrés vég dátum alapján
     * @param userId Szűrés felhasználó ID alapján (csak adminoknak)
     * @param limit Top N items to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTopItemsKpiStatisticKpiTopItemsGet(dateFrom?: string, dateTo?: string, userId?: number, limit?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<TopItemsKPI>;
    public getTopItemsKpiStatisticKpiTopItemsGet(dateFrom?: string, dateTo?: string, userId?: number, limit?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<TopItemsKPI>>;
    public getTopItemsKpiStatisticKpiTopItemsGet(dateFrom?: string, dateTo?: string, userId?: number, limit?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<TopItemsKPI>>;
    public getTopItemsKpiStatisticKpiTopItemsGet(dateFrom?: string, dateTo?: string, userId?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateFrom, 'date_from');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateTo, 'date_to');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>userId, 'user_id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');

        let localVarHeaders = this.defaultHeaders;

        // authentication (HTTPBearer) required
        localVarHeaders = this.configuration.addCredentialToHeaders('HTTPBearer', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/statistic/kpi/top-items`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<TopItemsKPI>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Total Receipts Kpi
     * Get total receipts count KPI - calculated in database
     * @param dateFrom Szűrés kezdő dátum alapján
     * @param dateTo Szűrés vég dátum alapján
     * @param userId Szűrés felhasználó ID alapján (csak adminoknak)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTotalReceiptsKpiStatisticKpiTotalReceiptsGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<TotalReceiptsKPI>;
    public getTotalReceiptsKpiStatisticKpiTotalReceiptsGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<TotalReceiptsKPI>>;
    public getTotalReceiptsKpiStatisticKpiTotalReceiptsGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<TotalReceiptsKPI>>;
    public getTotalReceiptsKpiStatisticKpiTotalReceiptsGet(dateFrom?: string, dateTo?: string, userId?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateFrom, 'date_from');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateTo, 'date_to');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>userId, 'user_id');

        let localVarHeaders = this.defaultHeaders;

        // authentication (HTTPBearer) required
        localVarHeaders = this.configuration.addCredentialToHeaders('HTTPBearer', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/statistic/kpi/total-receipts`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<TotalReceiptsKPI>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Total Spent Kpi
     * Get total spent KPI - calculated in database
     * @param dateFrom Szűrés kezdő dátum alapján
     * @param dateTo Szűrés vég dátum alapján
     * @param userId Szűrés felhasználó ID alapján (csak adminoknak)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTotalSpentKpiStatisticKpiTotalSpentGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<TotalSpentKPI>;
    public getTotalSpentKpiStatisticKpiTotalSpentGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<TotalSpentKPI>>;
    public getTotalSpentKpiStatisticKpiTotalSpentGet(dateFrom?: string, dateTo?: string, userId?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<TotalSpentKPI>>;
    public getTotalSpentKpiStatisticKpiTotalSpentGet(dateFrom?: string, dateTo?: string, userId?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateFrom, 'date_from');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateTo, 'date_to');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>userId, 'user_id');

        let localVarHeaders = this.defaultHeaders;

        // authentication (HTTPBearer) required
        localVarHeaders = this.configuration.addCredentialToHeaders('HTTPBearer', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/statistic/kpi/total-spent`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<TotalSpentKPI>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Wordcloud Data
     * Get word cloud data for most frequently purchased items - calculated in database
     * @param dateFrom Szűrés kezdő dátum alapján
     * @param dateTo Szűrés vég dátum alapján
     * @param userId Szűrés felhasználó ID alapján (csak adminoknak)
     * @param limit Number of items to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWordcloudDataStatisticWordcloudGet(dateFrom?: string, dateTo?: string, userId?: number, limit?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<WordCloudItem>>;
    public getWordcloudDataStatisticWordcloudGet(dateFrom?: string, dateTo?: string, userId?: number, limit?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<WordCloudItem>>>;
    public getWordcloudDataStatisticWordcloudGet(dateFrom?: string, dateTo?: string, userId?: number, limit?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<WordCloudItem>>>;
    public getWordcloudDataStatisticWordcloudGet(dateFrom?: string, dateTo?: string, userId?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateFrom, 'date_from');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateTo, 'date_to');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>userId, 'user_id');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');

        let localVarHeaders = this.defaultHeaders;

        // authentication (HTTPBearer) required
        localVarHeaders = this.configuration.addCredentialToHeaders('HTTPBearer', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/statistic/wordcloud`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<WordCloudItem>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
